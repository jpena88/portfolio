<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jpena.io</title>
    <link>https://jpena.io/</link>
    <description>Recent content on jpena.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 03 Jan 2020 13:28:44 -0800</lastBuildDate>
    
	<atom:link href="https://jpena.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About Me</title>
      <link>https://jpena.io/about/</link>
      <pubDate>Fri, 03 Jan 2020 13:28:44 -0800</pubDate>
      
      <guid>https://jpena.io/about/</guid>
      <description>I am a Site Reliability Engineer with over 10 years of experience doing lots of different things &amp;amp; solving many complex problems. What things you ask? Things like automation, network, security, monitoring, logging, cloud, full-stack developing, and everything in between.
I was once the first DevOps Engineer at a startup where I got the chance to build out the AWS infrastructure and code pipelines from the ground up. I got to wear many hats.</description>
    </item>
    
    <item>
      <title>Deploy Prisma to AWS Fargate with Terraform</title>
      <link>https://jpena.io/posts/my-first-post/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jpena.io/posts/my-first-post/</guid>
      <description>A recent project that I worked on introduced Prisma to our stack, an ORM-like layer that does the heavy lifting in your GraphQL server. Rather than diving deep into what Prisma is and how it operates, this post will guide you through using Terraform to automate &amp;amp; deploy the entire stack — The Prisma server &amp;amp; the AWS resources needed to support it.
If you prefer using CloudFormation for IaaC, you’re in luck!</description>
    </item>
    
  </channel>
</rss>